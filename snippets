/*
   // Create a new file name/number if needed and update DB
   if (n.fileName==NULL) {
      n.fileName=networkFileName();
      // Update DB
      sql=StringFormat("UPDATE NNETWORKS SET fileName=%s WHERE strategyNumber=%d AND dnnNumber=%d",n.fileName,net.StrategyNumber,n.dnnNumber);
      #ifdef _DEBUG_DNN
         Print(" -> ",sql);
      #endif

      request=DatabasePrepare(_mainDBHandle,sql); 
      if (request==INVALID_HANDLE) {
         #ifdef _DEBUG_DNN
            printf(" -> DB read failed with code %d",GetLastError());
         #endif
      }
      if (!DatabaseExecute(_mainDBHandle,sql)) {
         #ifdef _DEBUG_DNN
            printf(" -> DB read failed with code %d",GetLastError());
         #endif
      }
   } else {
      if (fileHandle=FileOpen("fn",FILE_WRITE|FILE_BIN|FILE_ANSI|FILE_COMMON)) {
         if (!nnArray.Load(fileHandle)) {
            #ifdef _DEBUG_DNN
               printf( " -> SUCCESS loaded file:%s",fn);
            #endif
         } else {
            #ifdef _DEBUG_DNN
               printf( " -> ERROR loading file:%s -> %d",fn, GetLastError());
            #endif
         }
      } else {
         #ifdef _DEBUG_DNN
            printf( " -> ERROR file:%s is missing -> %d",fn, GetLastError());
         #endif
      }
   }


   if (MQLInfoInteger(MQL_OPTIMIZATION)) { 
      // if optimizing we will create the network when its trained
   } else { 
      createNewNetwork();
      // loadNetwork();
   }
*/
/*
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string EANeuralNetwork::networkFileName() {

   MqlDateTime t;
   TimeToStruct(TimeCurrent(),t);

   string fn=StringFormat("%d%d%d%d%d%d%d%d.bin",t.year,t.mon,t.day,t.hour,t.min,t.sec);

   #ifdef _DEBUG_DNN
      printf( " -> New file name:%s",fn);
   #endif
   return (fn);
   

}
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
EANeuralNetwork::saveNetworkToDisk() {

   int fileHandle;

   string fn=nnetworkFileName();
   // If the file exists then remove it first before saving the new version
   if (FileIsExist(fn,FILE_COMMON)) {
      if (FileDelete(fn,FILE_COMMON)) {
         #ifdef _DEBUG_DNN
            printf( " -> DELETING existing file:%s",fn);
         #endif
      };
   }

   // Now create it
   if (fileHandle=FileOpen("fn",FILE_WRITE|FILE_BIN|FILE_ANSI|FILE_COMMON)) {
      if (!nnArray.Save(fileHandle)) {
         #ifdef _DEBUG_DNN
            printf( " -> SUCCESS created file:%s",fn);
         #endif
      } else {
         #ifdef _DEBUG_DNN
            printf( " -> ERROR saving file:%s -> %d",fn, GetLastError());
         #endif
      }
   } else {
      #ifdef _DEBUG_DNN
         printf( " ->  ERROR creating file:%s-> %d",fn, GetLastError());
      #endif
   }; 

   FileClose(fileHandle);

}

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
EANeuralNetwork::loadNetworkFromDisk() {

   int fileHandle;

   string fn=nnetworkFileName();
   // If the file exists then remove it first before saving the new version
   if (FileIsExist(fn,FILE_COMMON)) {
      if (fileHandle=FileOpen("fn",FILE_READ|FILE_BIN|FILE_ANSI|FILE_COMMON)) {
         if (!nnArray.Load(fileHandle)) {
            #ifdef _DEBUG_DNN
               printf( " -> SUCCESS loaded file:%s",fn);
            #endif
         } else {
            #ifdef _DEBUG_DNN
               printf( " -> ERROR loading file:%s -> %d",fn, GetLastError());
            #endif
         }
      } else {
         #ifdef _DEBUG_DNN
            printf( " -> ERROR opening handle for file:%s -> %d",fn, GetLastError());
         #endif
      }
   } else {
      #ifdef _DEBUG_DNN
         printf( " -> ERROR file:%s is missing -> %d",fn, GetLastError());
      #endif
   }

   FileClose(fileHandle);

}
*/

 #ifdef _DEBUG_DNN
      ss=StringFormat(" -> Saved network with:%d elements",nnArray.Total());
      printf(ss);
   #endif 

   // Save network to Database

   DatabaseTransactionBegin(_mainDBHandle);

   int request=DatabasePrepare(_mainDBHandle, "INSERT INTO NETWORKS (strategyNumber,nn) VALUES (?1,?2);");
   if (request==INVALID_HANDLE) {
      #ifdef _DEBUG_DNN
         printf(" -> DB DatabasePrepare request failed with code ", GetLastError());
      #endif
   }

   ArrayResize(nn,nnArray.Total());
   for (int i=0;i<nnArray.Total();i++) {
      nn[i]=DoubleToString(nnArray.At(i),8);
      printf(" -> nnArray:%2.2f nn:%s",nnArray.At(i),nn[i]);
   }
   //ArrayCopy(nn,nnArray,0,0,WHOLE_ARRAY);
   printf("-------------------");
   ArrayPrint(nn);
   printf("-------------------");

   if (!DatabaseBind(request,0,usp.strategyNumber)) {
      #ifdef _DEBUG_DNN
         printf(" -> DB DatabaseBind request failed with code ", GetLastError());
      #endif
   } else {
      #ifdef _DEBUG_DNN
         printf(" -> DB DatabaseBindArray request success %d",usp.strategyNumber);
      #endif
   }

   if (!DatabaseBindArray(request,1,nn)) {
      #ifdef _DEBUG_DNN
         printf(" -> DB DatabaseBindArray request failed with code ", GetLastError());
      #endif
   } else {
      #ifdef _DEBUG_DNN
         printf(" -> DB DatabaseBindArray request success");
      #endif
   }

   DatabaseRead(request);

   DatabaseTransactionCommit(_mainDBHandle);

   // Test reload
   //loadNetwork();

   
   int sN;
   string blobData[];

   ArrayResize(blobData,nnArray.Total());

   request=DatabasePrepare(_mainDBHandle, "SELECT strategyNumber, nn FROM NETWORKS"); 
   DatabaseRead(request);
   DatabaseColumnInteger   (request,0,sN);
   DatabaseColumnBlob      (request,1,blobData);

   printf(" -> Strategy number:%d",sN);
   for (int i=0;i<ArraySize(blobData);i++) {
      printf(" -> blobarray value:%s",blobData[i]);
   }

   delete(nnArray);
   nnArray=new CArrayDouble;
   printf(" -> blob array size:%d",ArraySize(blobData));
   string val;
   for (int i=0;i<ArraySize(blobData); i++) {
      val = blobData[i];
      nnArray.Add(StringToDouble(val));
      printf(" -> reread %s",val);
   }
   printf("222222");
   //loadNetwork();
   printf("33333");

   return true;

   /*
   "lotSize             REAL," 
   "fptl                REAL,"
   "fltl                REAL,"
   "fpts                REAL,"
   "flts                REAL,"
   "maxlong             REAL,"
   "maxshort            REAL,"
   "maxdaily            REAL,"
   "maxdailyhold        REAL,"
   "maxmg               REAL,"
   "mgmulti             REAL,"
   "longHLossamt        REAL,"
   "s_ADXperiod REAL ,"
   "s_ADXma REAL ,"
   "m_ADXperiod REAL ,"
   "m_ADXma REAL ,"
   "l_ADXperiod REAL ,"
   "l_ADXma REAL ,"
   "s_RSIperiod REAL ,"
   "s_RSIma REAL ,"
   "s_RSIap REAL ,"
   "m_RSIperiod REAL ,"
   "m_RSIma REAL ,"
   "m_RSIap REAL ,"
   "l_RSIperiod REAL ,"
   "l_RSIma REAL ,"
   "l_RSIap REAL ,"
   "s_MFIperiod REAL ,"
   "s_MFIma REAL ,"
   "m_MFIperiod REAL ,"
   "m_MFIma REAL ,"
   "l_MFIperiod REAL ,"
   "l_MFIma REAL ,"
   "s_SARperiod REAL ,"
   "s_SARstep REAL ,"
   "s_SARmax REAL ,"
   "m_SARperiod REAL ,"
   "m_SARstep REAL ,"
   "m_SARmax REAL ,"
   "l_SARperiod REAL ,"
   "l_SARstep REAL ,"
   "l_SARmax REAL ,"
   "s_ICHperiod REAL ,"
   "s_tenkan_sen REAL ,"
   "s_kijun_sen REAL ,"
   "s_senkou_span_b REAL ,"
   "m_ICHperiod REAL ,"
   "m_tenkan_sen REAL ,"
   "m_kijun_sen REAL ,"
   "m_senkou_span_b REAL ,"
   "l_ICHperiod REAL ,"
   "l_tenkan_sen REAL ,"
   "l_kijun_sen REAL ,"
   "l_senkou_span_b REAL ,"
   "s_RVIperiod REAL ,"
   "s_RVIma REAL ,"
   "m_RVIperiod REAL ,"
   "m_RVIma REAL ,"
   "l_RVIperiod REAL ,"
   "l_RVIma REAL ,"
   "s_STOCperiod REAL ,"
   "s_kPeriod REAL ,"
   "s_dPeriod REAL ,"
   "s_slowing REAL ,"
   "s_STOCmamethod REAL ,"
   "s_STOCpa REAL ,"
   "m_STOCperiod REAL ,"
   "m_kPeriod REAL ,"
   "m_dPeriod REAL ,"
   "m_slowing REAL ,"
   "m_STOCmamethod REAL ,"
   "m_STOCpa REAL ,"
   "l_STOCperiod REAL ,"
   "l_kPeriod REAL ,"
   "l_dPeriod REAL ,"
   "l_slowing REAL ,"
   "l_STOCmamethod REAL ,"
   "l_STOCpa REAL ,"
   "s_OSMAperiod REAL ,"
   "s_OSMAfastEMA REAL ,"
   "s_OSMAslowEMA REAL ,"
   "s_OSMAsignalPeriod REAL ,"
   "s_OSMApa REAL ,"
   "m_OSMAperiod REAL ,"
   "m_OSMAfastEMA REAL ,"
   "m_OSMAslowEMA REAL ,"
   "m_OSMAsignalPeriod REAL ,"
   "m_OSMApa REAL ,"
   "l_OSMAperiod REAL ,"
   "l_OSMAfastEMA REAL ,"
   "l_OSMAslowEMA REAL ,"
   "l_OSMAsignalPeriod REAL ,"
   "l_OSMApa REAL ,"
   "s_MACDDperiod REAL ,"
   "s_MACDDfastEMA REAL ,"
   "s_MACDDslowEMA REAL ,"
   "s_MACDDsignalPeriod REAL ,"
   "m_MACDDperiod REAL ,"
   "m_MACDDfastEMA REAL ,"
   "m_MACDDslowEMA REAL ,"
   "m_MACDDsignalPeriod REAL ,"
   "l_MACDDperiod REAL ,"
   "l_MACDDfastEMA REAL ,"
   "l_MACDDslowEMA REAL ,"
   "l_MACDDsignalPeriod REAL ,"
   "s_MACDBULLperiod REAL ,"
   "s_MACDBULLfastEMA REAL ,"
   "s_MACDBULLslowEMA REAL ,"
   "s_MACDBULLsignalPeriod REAL ,"
   "m_MACDBULLperiod REAL ,"
   "m_MACDBULLfastEMA REAL ,"
   "m_MACDBULLslowEMA REAL ,"
   "m_MACDBULLsignalPeriod REAL ,"
   "l_MACDBULLperiod REAL ,"
   "l_MACDBULLfastEMA REAL ,"
   "l_MACDBULLslowEMA REAL ,"
   "l_MACDBULLsignalPeriod REAL ,"
   "s_MACDBEARperiod REAL ,"
   "s_MACDBEARfastEMA REAL ,"
   "s_MACDBEARslowEMA REAL ,"
   "s_MACDBEARsignalPeriod REAL ,"
   "m_MACDBEARperiod REAL ,"
   "m_MACDBEARfastEMA REAL ,"
   "m_MACDBEARslowEMA REAL ,"
   "m_MACDBEARsignalPeriod REAL ,"
   "l_MACDBEARperiod REAL ,"
   "l_MACDBEARfastEMA REAL ,"
   "l_MACDBEARslowEMA REAL ,"
   "l_MACDBEARsignalPeriod REAL)";
*/


      //v[0].v0[10]=balance;
      //v[0].v0[11]=balance_plus_profitfactor;
      //v[0].v0[12]=balance_plus_expectedpayoff;
      //v[0].v0[13]=balance_plus_dd;
      //v[0].v0[14]=balance_plus_recoveryfactor;
      //v[0].v0[15]=balance_plus_sharpe;

/*
      v[0].v1[0]=ilsize;
      v[0].v1[1]=ifptl;
      v[0].v1[2]=ifltl;
      v[0].v1[3]=ifpts;
      v[0].v1[4]=iflts;
      v[0].v1[5]=imaxlong;
      v[0].v1[6]=imaxshort;
      v[0].v1[7]=imaxdaily;
      v[0].v1[8]=imaxdailyhold;   
      v[0].v1[9]=ilongHLossamt;
      v[0].v1[10]=imaxmg;
      v[0].v1[11]=imgmulti;

      v[0].v12[0]=iuseADX;
      v[0].v12[1]=is_ADXperiod;
      v[0].v12[2]=is_ADXma;
      v[0].v12[3]=im_ADXperiod;
      v[0].v12[4]=im_ADXma;
      v[0].v12[5]=il_ADXperiod;
      v[0].v12[6]=il_ADXma;


      v[0].v12[0]=iuseRSI;
      v[0].v12[1]=is_RSIperiod;
      v[0].v12[2]=is_RSIma;
      v[0].v12[3]=is_RSIap;
      v[0].v12[4]=im_RSIperiod;
      v[0].v12[5]=im_RSIma;
      v[0].v12[6]=is_RSIap;
      v[0].v12[7]=il_RSIperiod;
      v[0].v12[8]=il_RSIma;
      v[0].v12[9]=il_RSIap;


      v[0].v12[0]=iuseMFI;
      v[0].v12[1]=is_MFIperiod;
      v[0].v12[2]=is_MFIma;
      v[0].v12[3]=im_MFIperiod;
      v[0].v12[4]=im_MFIma;
      v[0].v12[5]=il_MFIperiod;
      v[0].v12[6]=il_MFIma;


      v[0].v12[0]=iuseSAR;
      v[0].v12[1]=is_SARperiod;
      v[0].v12[2]=is_SARstep;
      v[0].v12[3]=is_SARmax;
      v[0].v12[4]=im_SARperiod;
      v[0].v12[5]=im_SARstep;
      v[0].v12[6]=im_SARmax;
      v[0].v12[7]=il_SARperiod;
      v[0].v12[8]=il_SARstep;
      v[0].v12[9]=il_SARmax;


      v[0].v12[0]=iuseICH;
      v[0].v12[1]=is_ICHperiod;
      v[0].v12[2]=is_tenkan_sen;
      v[0].v12[3]=is_kijun_sen;
      v[0].v12[4]=is_senkou_span_b;
      v[0].v12[5]=im_ICHperiod;
      v[0].v12[6]=im_tenkan_sen;
      v[0].v12[7]=im_kijun_sen;
      v[0].v12[8]=im_senkou_span_b;
      v[0].v12[9]=il_ICHperiod;
      v[0].v12[10]=il_tenkan_sen;
      v[0].v12[11]=il_kijun_sen;
      v[0].v12[12]=il_senkou_span_b;


      v[0].v12[0]=iuseRVI;
      v[0].v12[1]=is_RVIperiod;
      v[0].v12[2]=is_RVIma;
      v[0].v12[3]=im_RVIperiod;
      v[0].v12[4]=im_RVIma;
      v[0].v12[5]=il_RVIperiod;
      v[0].v12[6]=il_RVIma;


      v[0].v12[0]=iuseSTOC;
      v[0].v12[1]=is_STOCperiod;
      v[0].v12[2]=is_kPeriod;
      v[0].v12[3]=is_dPeriod;
      v[0].v12[4]=is_slowing;
      v[0].v12[5]=is_STOCmamethod;
      v[0].v12[6]=is_STOCpa;
      v[0].v12[7]=im_STOCperiod;
      v[0].v12[8]=im_kPeriod;
      v[0].v12[9]=im_dPeriod;
      v[0].v12[10]=im_slowing;
      v[0].v12[11]=im_STOCmamethod;
      v[0].v12[12]=im_STOCpa;
      v[0].v12[13]=il_STOCperiod;
      v[0].v12[14]=il_kPeriod;
      v[0].v12[15]=il_dPeriod;
      v[0].v12[16]=il_slowing;
      v[0].v12[17]=il_STOCmamethod;
      v[0].v12[18]=il_STOCpa;


      v[0].v12[0]=iuseOSMA;
      v[0].v12[1]=is_OSMAperiod;
      v[0].v12[2]=is_OSMAfastEMA;
      v[0].v12[3]=is_OSMAslowEMA;
      v[0].v12[4]=is_OSMAsignalPeriod;
      v[0].v12[5]=is_OSMApa;
      v[0].v12[6]=im_OSMAperiod;
      v[0].v12[7]=im_OSMAfastEMA;
      v[0].v12[8]=im_OSMAslowEMA;
      v[0].v12[9]=im_OSMAsignalPeriod;
      v[0].v12[10]=im_OSMApa;
      v[0].v12[11]=il_OSMAperiod;
      v[0].v12[12]=il_OSMAfastEMA;
      v[0].v12[13]=il_OSMAslowEMA;
      v[0].v12[14]=il_OSMAsignalPeriod;
      v[0].v12[15]=il_OSMApa;

      v[0].v12[0]=iuseMACD;
      v[0].v12[1]=is_MACDDperiod;
      v[0].v12[2]=is_MACDDfastEMA;
      v[0].v12[3]=is_MACDDslowEMA;
      v[0].v12[4]=is_MACDDsignalPeriod;
      v[0].v12[5]=im_MACDDperiod;
      v[0].v12[6]=im_MACDDfastEMA;
      v[0].v12[7]=im_MACDDslowEMA;
      v[0].v12[8]=im_MACDDsignalPeriod;
      v[0].v12[9]=il_MACDDperiod;
      v[0].v12[10]=il_MACDDfastEMA;
      v[0].v12[11]=il_MACDDslowEMA;
      v[0].v12[12]=il_MACDDsignalPeriod;

      v[0].v12[0]=iuseMACDBULL;
      v[0].v12[1]=is_MACDBULLperiod;
      v[0].v12[2]=is_MACDBULLfastEMA;
      v[0].v12[3]=is_MACDBULLslowEMA;
      v[0].v12[4]=is_MACDBULLsignalPeriod;
      v[0].v12[5]=im_MACDBULLperiod;
      v[0].v12[6]=im_MACDBULLfastEMA;
      v[0].v12[7]=im_MACDBULLslowEMA;
      v[0].v12[8]=im_MACDBULLsignalPeriod;
      v[0].v12[9]=il_MACDBULLperiod;
      v[0].v12[10]=il_MACDBULLfastEMA;
      v[0].v12[11]=il_MACDBULLslowEMA;
      v[0].v12[12]=il_MACDBULLsignalPeriod;

      v[0].v12[0]=iuseMACDBEAR;
      v[0].v12[1]=is_MACDBEARperiod;
      v[0].v12[3]=is_MACDBEARfastEMA;
      v[0].v12[4]=is_MACDBEARslowEMA;
      v[0].v12[5]=is_MACDBEARsignalPeriod;
      v[0].v12[6]=im_MACDBEARperiod;
      v[0].v12[7]=im_MACDBEARfastEMA;
      v[0].v12[8]=im_MACDBEARslowEMA;
      v[0].v12[9]=im_MACDBEARsignalPeriod;
      v[0].v12[10]=il_MACDBEARperiod;
      v[0].v12[11]=il_MACDBEARfastEMA;
      v[0].v12[12]=il_MACDBEARslowEMA;
      v[0].v12[13]=il_MACDBEARsignalPeriod;


      v[0].v12[126]=iuseZZ;
      v[0].v12[127]=is_ZZperiod;
      v[0].v12[128]=im_ZZperiod;
      v[0].v12[129]=il_ZZperiod;
      v[0].v12[130]=iuseMACDBULLDIV;
      v[0].v12[131]=iuseMACDBEARDIV;
*/

string request1a=StringFormat("INSERT INTO TECHPASSES ("
         "selection,strategyNumber,iterationNumber,dnnNumber,dnnType,dataFrameSize,lookBackBars,"
         "trades,winningTrades,profit,grossProfit,grossLoss,"
         "sharpeRatios,profitFactor,recoveryFactor,expectedPayoff,onTester,"
         "blBalance,blProfitFactor,blExpectedPayoff,blDrawdown,blRecoverFactor,blSharpeRatio,"
         "lotSize,fptl,fltl,fpts,flts,maxlong,maxshort,maxdaily,maxdailyhold,maxmg,mgmulti,longHLossamt,"   // x12                                                                           
         "s_ADXperiod,s_ADXma,m_ADXperiod,m_ADXma,l_ADXperiod,l_ADXma,s_RSIperiod,s_RSIma,s_RSIap,m_RSIperiod,m_RSIma,m_RSIap,l_RSIperiod,l_RSIma,l_RSIap,s_MFIperiod,"
         "s_MFIma,m_MFIperiod,m_MFIma,l_MFIperiod,l_MFIma,s_SARperiod,s_SARstep,s_SARmax,m_SARperiod,m_SARstep,m_SARmax,l_SARperiod,l_SARstep,l_SARmax,s_ICHperiod,"
         "s_tenkan_sen,s_kijun_sen,s_senkou_span_b,m_ICHperiod,m_tenkan_sen,m_kijun_sen,m_senkou_span_b,l_ICHperiod,l_tenkan_sen,l_kijun_sen,l_senkou_span_b,s_RVIperiod,"
         "s_RVIma,m_RVIperiod,m_RVIma,l_RVIperiod,l_RVIma,s_STOCperiod,s_kPeriod,s_dPeriod,s_slowing,s_STOCmamethod,s_STOCpa,m_STOCperiod,m_kPeriod,m_dPeriod,m_slowing,"
         "m_STOCmamethod,m_STOCpa,l_STOCperiod,l_kPeriod,l_dPeriod,l_slowing,l_STOCmamethod,l_STOCpa,s_OSMAperiod,s_OSMAfastEMA,s_OSMAslowEMA,s_OSMAsignalPeriod,s_OSMApa,m_OSMAperiod,"
         "m_OSMAfastEMA,m_OSMAslowEMA,m_OSMAsignalPeriod,m_OSMApa,l_OSMAperiod,l_OSMAfastEMA,l_OSMAslowEMA,l_OSMAsignalPeriod,l_OSMApa,s_MACDDperiod,s_MACDDfastEMA,"
         "s_MACDDslowEMA,s_MACDDsignalPeriod,m_MACDDperiod,m_MACDDfastEMA,m_MACDDslowEMA,m_MACDDsignalPeriod,l_MACDDperiod,l_MACDDfastEMA,l_MACDDslowEMA,l_MACDDsignalPeriod,"
         "s_MACDBULLperiod,s_MACDBULLfastEMA,s_MACDBULLslowEMA,s_MACDBULLsignalPeriod,m_MACDBULLperiod,m_MACDBULLfastEMA,m_MACDBULLslowEMA,m_MACDBULLsignalPeriod,l_MACDBULLperiod,"
         "l_MACDBULLfastEMA,l_MACDBULLslowEMA,l_MACDBULLsignalPeriod,s_MACDBEARperiod,s_MACDBEARfastEMA,s_MACDBEARslowEMA,s_MACDBEARsignalPeriod,m_MACDBEARperiod,m_MACDBEARfastEMA,"
         "m_MACDBEARslowEMA,m_MACDBEARsignalPeriod,l_MACDBEARperiod,l_MACDBEARfastEMA,l_MACDBEARslowEMA,l_MACDBEARsignalPeriod"
         ") VALUES (0,%d,%d,0,0,0,0,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,",                             
         _strategyNumber, iterationNumber,
         values[0], values[1], values[2], values[3], values[4], values[5],
         values[6], values[7], values[8], values[9], values[10],
         values[11], values[12], values[13], values[14],
         values[15]);

         string request1b=StringFormat("%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,",
         values[34],values[35],values[36],values[37],values[38],values[39],values[40],values[41],values[42],
         values[43],values[44],values[45]);
         //printf("%s",request4b);
         string request1c=StringFormat("%.5f,%.5f,%.5f,%.5f,",values[46],values[47],values[48],values[49]);
         //printf("%s",request4c);
         string request1d=StringFormat("%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,",
         values[50],values[51],values[52],values[53],values[54],values[55],values[56],values[57],values[58],values[59],
         values[60],values[61],values[62],values[63],values[64],values[65],values[66],values[67],values[68],values[69]);
         //printf("%s",request4d);
         string request1e=StringFormat("%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,",
         values[70],values[71],values[72],values[73],values[74],values[75],values[76],values[77],values[78],values[79],
         values[80],values[81],values[82],values[83],values[84],values[85],values[86],values[87],values[88],values[89]);
         //printf("%s",request4e);
         string request1f=StringFormat("%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,",
         values[90],values[91],values[92],values[93],values[94],values[95],values[96],values[97],values[98],values[99],
         values[100],values[101],values[102],values[103],values[104],values[105],values[106],values[107],values[108],values[109]);
         //printf("%s",request4f);
         string request1g=StringFormat("%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,",
         values[110],values[111],values[112],values[113],values[114],values[115],values[116],values[117],values[118],values[119],
         values[120],values[121],values[122],values[123],values[124],values[125],values[126],values[127],values[128],values[129]);
         //printf("%s",request4g);  
         string request1h=StringFormat("%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,",
         values[130],values[131],values[132],values[133],values[134],values[135],values[136],values[137],values[138],values[139],
         values[140],values[141],values[142],values[143],values[144],values[145],values[146],values[147],values[148],values[149]);
         //printf("%s",request4h);
         string request1i=StringFormat("%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f)", 
         values[150],values[151],values[152],values[153],values[154],values[155],values[156],values[157],values[158],values[159],
         values[160],values[161],values[162]);
         //printf("%s",request4i);       


      string request1=StringFormat("%s%s%s%s%s%s%s%s%s",request1a,request1b,request1c,request1d,request1e,request1f,request1g,request1h,request1i);

      